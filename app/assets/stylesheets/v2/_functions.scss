// BlueSky Design System V2 - Functions and Mixins
// Reusable SCSS utilities for consistent styling patterns

@import 'variables';

// =============================================================================
// COLOR FUNCTIONS
// =============================================================================

// Lighten a color consistently
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Darken a color consistently
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Add transparency to a color
@function alpha($color, $opacity) {
  @return rgba($color, $opacity);
}

// Get contrast color (black or white) based on background
@function contrast-color($background) {
  $l: lightness($background);
  @if $l > 50 {
    @return $gray-900;
  } @else {
    @return $white;
  }
}

// =============================================================================
// SPACING FUNCTIONS
// =============================================================================

// Calculate rem values from pixels
@function rem($pixels, $base: 16px) {
  @return #{$pixels / $base}rem;
}

// Calculate em values from pixels
@function em($pixels, $base: 16px) {
  @return #{$pixels / $base}em;
}

// =============================================================================
// LAYOUT MIXINS
// =============================================================================

// Flexbox center mixin
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Flexbox row with gap
@mixin flex-row($gap: $spacing-md, $align: center) {
  display: flex;
  flex-direction: row;
  align-items: $align;
  gap: $gap;
}

// Flexbox column with gap
@mixin flex-column($gap: $spacing-md, $align: stretch) {
  display: flex;
  flex-direction: column;
  align-items: $align;
  gap: $gap;
}

// Absolute positioning cover
@mixin absolute-cover {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Fixed aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: percentage($height / $width);
  }
  
  > * {
    @include absolute-cover;
  }
}

// =============================================================================
// TYPOGRAPHY MIXINS
// =============================================================================

// Text truncation with ellipsis
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line text truncation
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Smooth font rendering
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Heading styles
@mixin heading-style($size: $font-size-xl, $weight: $font-weight-semi-bold) {
  font-size: $size;
  font-weight: $weight;
  line-height: 1.2;
  color: $gray-900;
  @include font-smoothing;
}

// =============================================================================
// VISUAL EFFECTS MIXINS
// =============================================================================

// Box shadow with multiple options
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  } @else if $level == 2 {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
  } @else if $level == 3 {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
  } @else if $level == 4 {
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }
}

// Gradient background
@mixin gradient-bg($start-color, $end-color: darken($start-color, 10%), $angle: 135deg) {
  background: $start-color;
  background: linear-gradient($angle, $start-color 0%, $end-color 100%);
}

// Hover lift effect
@mixin hover-lift($lift: -2px, $shadow-increase: true) {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  
  &:hover {
    transform: translateY($lift);
    @if $shadow-increase {
      @include box-shadow(3);
    }
  }
  
  &:active {
    transform: translateY(0);
  }
}

// Focus outline styles
@mixin focus-outline($color: $primary, $width: 2px, $offset: 2px) {
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    outline: $width solid $color;
    outline-offset: $offset;
  }
}

// Loading shimmer effect
@mixin loading-shimmer {
  position: relative;
  overflow: hidden;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(255, 255, 255, 0.4) 50%,
      transparent 100%
    );
    animation: shimmer 1.5s infinite;
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

// =============================================================================
// COMPONENT MIXINS
// =============================================================================

// Button base styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: $spacing-sm;
  padding: 10px 20px;
  font-size: $font-size-base;
  font-weight: $font-weight-medium;
  line-height: 1.4;
  border-radius: $border-radius-md;
  border: 1px solid transparent;
  cursor: pointer;
  text-decoration: none;
  white-space: nowrap;
  transition: all 0.2s ease;
  @include focus-outline;
}

// Button reset - removes all default button styles
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  text-align: inherit;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  
  &:focus {
    outline: none;
  }
  
  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

// Button variant
@mixin button-variant($bg-color, $text-color: white) {
  @include gradient-bg($bg-color);
  color: $text-color;
  border: none;
  box-shadow: 0 2px 4px alpha($bg-color, 0.2);
  
  &:hover {
    @include gradient-bg(tint($bg-color, 10%), $bg-color);
    box-shadow: 0 3px 6px alpha($bg-color, 0.25);
    color: $text-color; // Ensure text color stays the same on hover
  }
  
  &:active {
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
    color: $text-color; // Ensure text color stays the same when active
  }
  
  &:focus {
    color: $text-color; // Ensure text color stays the same on focus
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

// Card styles
@mixin card($padding: $spacing-lg, $shadow-level: 1) {
  background: $white;
  border-radius: $border-radius-md;
  padding: $padding;
  @include box-shadow($shadow-level);
  transition: all 0.3s ease;
}

// Status indicator
@mixin status-indicator($color, $position: 'left', $width: 4px) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    background: $color;
    
    @if $position == 'left' {
      left: 0;
      top: 0;
      bottom: 0;
      width: $width;
      border-radius: $border-radius-md 0 0 $border-radius-md;
    } @else if $position == 'top' {
      top: 0;
      left: 0;
      right: 0;
      height: $width;
      border-radius: $border-radius-md $border-radius-md 0 0;
    }
  }
}

// Form control styles
@mixin form-control {
  width: 100%;
  padding: $spacing-sm $spacing-md;
  font-size: $font-size-base;
  line-height: 1.5;
  color: $gray-700;
  background-color: $white;
  border: 1px solid $gray-300;
  border-radius: $border-radius-md;
  transition: all 0.15s ease;
  
  &:hover {
    border-color: $gray-400;
  }
  
  &:focus {
    outline: none;
    border-color: $primary;
    box-shadow: 0 0 0 3px alpha($primary, 0.1);
  }
  
  &:disabled {
    background-color: $gray-100;
    cursor: not-allowed;
    opacity: 0.6;
  }
}

// Badge/Label styles
@mixin badge($bg-color, $text-color: white) {
  display: inline-flex;
  align-items: center;
  padding: 2px 8px;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.4;
  color: $text-color;
  background-color: $bg-color;
  border-radius: $border-radius-sm;
  white-space: nowrap;
}

// Alert variant mixin
@mixin alert-variant($background, $border-color: darken($background, 10%), $text-color: darken($background, 60%)) {
  background-color: lighten($background, 35%);
  border: 1px solid $border-color;
  color: $text-color;
  border-radius: $border-radius-md;
  padding: $spacing-md;
  
  a {
    color: darken($text-color, 10%);
    font-weight: $font-weight-medium;
    
    &:hover {
      color: darken($text-color, 20%);
    }
  }
  
  .alert-link {
    color: darken($text-color, 10%);
    font-weight: $font-weight-medium;
  }
}

// =============================================================================
// RESPONSIVE MIXINS
// =============================================================================

// Media query mixins
@mixin mobile {
  @media (max-width: 767px) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: 768px) and (max-width: 991px) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: 992px) {
    @content;
  }
}

@mixin large-desktop {
  @media (min-width: 1200px) {
    @content;
  }
}

// Hide on specific breakpoints
@mixin hide-on-mobile {
  @include mobile {
    display: none !important;
  }
}

@mixin hide-on-desktop {
  @include desktop {
    display: none !important;
  }
}

// =============================================================================
// UTILITY MIXINS
// =============================================================================

// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Visually hidden (accessible)
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Reset list styles
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Transition with prefix
@mixin transition($properties...) {
  transition: $properties;
}

// Transform with prefix
@mixin transform($transforms) {
  transform: $transforms;
}

// Custom scrollbar
@mixin custom-scrollbar($thumb-color: $gray-400, $track-color: $gray-100, $width: 6px) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $width / 2;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: darken($thumb-color, 10%);
    }
  }
}
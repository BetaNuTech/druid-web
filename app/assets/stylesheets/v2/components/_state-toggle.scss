// State Toggle Component
// Lead state progression breadcrumb-style navigation

@import '../variables';

// =============================================================================
// Main State Toggle Component
// =============================================================================

.state-toggle {
  background: $white;
  padding: $spacing-md 0;
  border-bottom: 1px solid $gray-100;
  position: relative;
  z-index: 100;
  overflow: visible !important;
  
  // Breadcrumb list container
  &__crumbs {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0;
    flex-wrap: wrap;
    justify-content: center;
    overflow: visible !important; // Ensure dropdowns aren't clipped
  }
  
  // Individual state item
  &__crumb {
    position: relative;
    display: flex;
    align-items: center;
    
    // Dropdown variant for state with actions
    &--dropdown {
      position: relative; // Allow dropdown to position relative to this
      
      // On medium screens, adjust positioning
      @media (min-width: 768px) and (max-width: 1200px) {
        position: static; // Allow dropdown to escape container
      }
      
      .dropdown-menu {
        margin-top: $spacing-xs;
        min-width: 240px;
        max-width: 320px;
        z-index: 9999; // Maximum z-index to appear above everything
        border: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-radius: $border-radius-md;
        padding: $spacing-xs 0;
        background-color: $white; // Ensure solid background
        
        // On tablets/narrow screens, position to avoid sidebar
        @media (min-width: 768px) and (max-width: 1200px) {
          left: 0;
          margin-left: 100px; // Offset to the right to avoid sidebar overlap
        }
        
        li {
          padding: 0;
          
          a {
            display: block;
            padding: $spacing-sm $spacing-md;
            color: $gray-700;
            text-decoration: none;
            transition: all 0.15s ease;
            
            &:hover {
              background: $gray-50;
              color: $primary;
              
              strong {
                color: $primary;
              }
            }
            
            strong {
              display: block;
              font-weight: $font-weight-semi-bold;
              margin-bottom: 2px;
              color: $gray-900;
            }
            
            small {
              display: block;
              color: $gray-600;
              font-size: $font-size-xs;
              line-height: 1.4;
            }
          }
        }
      }
    }
  }
  
  // State button/link styling
  &__link {
    display: inline-flex;
    align-items: center;
    gap: 6px; // Better spacing between icon and text
    padding: 6px 14px;
    background: $gray-50;
    border: 2px solid transparent;
    border-radius: 50px;
    color: $gray-600;
    text-decoration: none;
    font-weight: $font-weight-medium;
    font-size: $font-size-xs;
    position: relative;
    transition: all 0.15s ease;
    min-height: 32px;
    white-space: nowrap;
    
    // Icon styling
    .glyphicon {
      font-size: 14px;
      line-height: 1;
      
      &:not(:last-child) {
        margin-right: 0; // Use gap instead
      }
    }
    
    // Hover state
    &:hover {
      background: $gray-100;
      border-color: $gray-300;
    }
    
    // Active/current state
    &--active {
      background: $primary;
      color: $white;
      border-color: $primary;
      font-weight: $font-weight-semi-bold;
      box-shadow: 0 1px 4px rgba($primary, 0.2);
      
      &:hover {
        background: darken($primary, 5%);
        border-color: darken($primary, 5%);
        color: $white;
        box-shadow: 0 2px 6px rgba($primary, 0.3);
      }
      
      &:active {
        box-shadow: 0 1px 2px rgba($primary, 0.2);
      }
    }
    
    // Inactive/future states
    &--inactive {
      background: $white;
      border-color: $gray-300;
      color: $gray-600;
      cursor: not-allowed;
      opacity: 1;
      font-weight: $font-weight-normal;
      
      &:hover {
        background: $white;
        border-color: $gray-300;
        color: $gray-600;
      }
    }
    
    // Isolated/non-standard states
    &--isolated {
      background: $warning;
      color: $white;
      border-color: $warning;
      box-shadow: 0 1px 4px rgba($warning, 0.2);
      
      &:hover {
        background: darken($warning, 5%);
        border-color: darken($warning, 5%);
        color: $white;
        box-shadow: 0 2px 6px rgba($warning, 0.3);
      }
    }
    
    // Dropdown toggle specific
    &.dropdown-toggle {
      padding-right: 22px; // More space for caret
      
      // Show caret after text
      &::after {
        content: '';
        display: inline-block;
        width: 0;
        height: 0;
        margin-left: 6px;
        vertical-align: middle;
        border-top: 4px solid;
        border-right: 4px solid transparent;
        border-left: 4px solid transparent;
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
      }
      
      // Hide default Bootstrap caret
      .caret {
        display: none !important;
      }
    }
  }
  
  // Agent info section
  &__agent {
    margin-top: $spacing-md;
    display: flex;
    align-items: center;
    justify-content: center;
    
    span {
      font-size: $font-size-sm;
      color: $gray-700;
      font-weight: $font-weight-medium;
    }
  }
}

// =============================================================================
// Legacy Class Support (for backward compatibility)
// =============================================================================

.state_toggle {
  @extend .state-toggle;
}

#crumbs {
  @extend .state-toggle__crumbs;
  
  // Override generic dropdown styles for crumb dropdowns
  .dropdown {
    position: relative;
    
    &.open {
      > .dropdown-menu {
        z-index: 9999; // Maximum z-index
        display: block;
      }
    }
  }
}

.crumb {
  @extend .state-toggle__crumb;
  
  &.dropdown {
    @extend .state-toggle__crumb--dropdown;
    position: static !important;
  }
}

.crumb-link {
  @extend .state-toggle__link;
}

.crumb-active {
  @extend .state-toggle__link--active;
}

.crumb-inactive {
  @extend .state-toggle__link--inactive;
}

.crumb-isolated {
  @extend .state-toggle__link--isolated;
}

.state_toggle-agent {
  @extend .state-toggle__agent;
}

// =============================================================================
// Fixes and Overrides
// =============================================================================

// Remove all pseudo-elements that might create arrows or duplicate icons
.state_toggle,
.state-toggle,
#crumbs {
  .crumb,
  .state-toggle__crumb,
  li {
    &::before,
    &::after {
      content: none !important;
      display: none !important;
    }
  }
  
  .crumb-link,
  .state-toggle__link {
    // Remove duplicate showing state icons
    &[data-state="showing"]::before {
      display: none !important;
    }
    
    // Ensure proper icon spacing
    .glyphicon:not(:last-child) {
      margin-right: 0; // Gap is handled by flexbox
    }
    
    // Override breadcrumbs.scss inactive styles
    &.crumb-inactive {
      background: $white !important;
      border-color: $gray-300 !important;
      color: $gray-600 !important;
      opacity: 1 !important;
      font-weight: $font-weight-normal !important;
      
      &:hover {
        background: $white !important;
        border-color: $gray-300 !important;
        color: $gray-600 !important;
        transform: none !important;
      }
    }
  }
  
  // Legacy dropdown toggle support
  .crumb-link.dropdown-toggle {
    padding-right: 28px !important; // More space for caret
    
    // Show caret after text
    &::after {
      content: '' !important;
      display: inline-block !important;
      width: 0 !important;
      height: 0 !important;
      margin-left: 0 !important;
      vertical-align: middle !important;
      border-top: 4px solid !important;
      border-right: 4px solid transparent !important;
      border-left: 4px solid transparent !important;
      position: absolute !important;
      right: 10px !important;
      top: 50% !important;
      transform: translateY(-50%) !important;
    }
    
    // Hide default Bootstrap caret
    .caret {
      display: none !important;
    }
  }
}

// =============================================================================
// Responsive Design
// =============================================================================

// =============================================================================
// Mobile Styles
// =============================================================================
@media (max-width: 767px) {
  .state-toggle {
    padding: $spacing-sm 0;
    
    &__crumbs {
      gap: 6px;
      justify-content: center;
    }
    
    &__link {
      padding: 5px 12px;
      font-size: 11px;
      min-height: 28px;
      
      .glyphicon {
        font-size: 12px;
      }
    }
    
    &__agent {
      margin-top: $spacing-sm;
      
      span {
        font-size: $font-size-xs;
      }
    }
    
    // Mobile dropdown positioning
    &__crumb--dropdown {
      .dropdown-menu {
        position: fixed;
        left: 10px;
        right: 10px;
        width: auto;
      }
    }
  }
  
  // Legacy mobile support
  #crumbs {
    .dropdown {
      &.open {
        .dropdown-menu {
          position: fixed;
          left: 10px;
          right: 10px;
          width: auto;
        }
      }
    }
  }
}

